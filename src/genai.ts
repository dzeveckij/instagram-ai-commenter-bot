import { GoogleGenAI, GenerationConfig, Content, HarmCategory, HarmBlockThreshold } from '@google/genai';

export class AICommentGenerator {
    private apiKey: string;
    private generationConfig: GenerationConfig;

    constructor(apiKey: string) {
        if (!apiKey) {
            throw new Error('Google AI API key is not provided in config.ts.');
        }
        this.apiKey = apiKey;
        this.generationConfig = {
            temperature: 0.9,
            topP: 1,
            topK: 1,
            maxOutputTokens: 80,
        };
    }

    private buildPrompt(postText: string, targetUsername: string, promptHint?: string): string {
        let prompt = `You are an expert at writing engaging, human-like Instagram comments.
Your goal is to write a comment for a post by @${targetUsername}.

Post content: "${postText || 'The post has no text caption, so comment on the photo/video itself.'}"

`;

        if (promptHint) {
            prompt += `Important context to guide your comment: ${promptHint}\n\n`;
        }

        prompt += `Your Instructions:
1.  Write a super short and relevant comment.
2.  The comment MUST sound authentic and not like it was generated by a bot.
3.  Refer to something specific from the post content if possible.
4.  If there's an image provided, comment on what you see in the image.
5.  Keep it concise (1 sentence is ideal).
6.  ABSOLUTELY NO emojis.
7.  ABSOLUTELY NO hashtags.
8.  Vary your tone and phrasing. Avoid generic compliments like "Great post!".
9.  Don't ask questions or try to start a conversation.
10.  If the post is a video, comment on the video content.
11.  Don't share personal opinions or experiences or relate to anything.
12. Dont write super generic comments like "This is so inspiring!" or "Love this!".
13. Don't use exclamation marks or any punctuation that implies excitement.
14. Do not use first person pronouns like "I" or "me".


Write only the final comment text below. Do not add quotation marks around your response.`;

        return prompt;
    }

    private async fetchImageAsBase64(imageUrl: string): Promise<{ data: string; mimeType: string } | null> {
        try {
            const response = await fetch(imageUrl);
            if (!response.ok) {
                console.error(`Failed to fetch image: ${response.status} ${response.statusText}`);
                return null;
            }
            
            const imageArrayBuffer = await response.arrayBuffer();
            const base64ImageData = Buffer.from(imageArrayBuffer).toString('base64');
            
            const contentType = response.headers.get('content-type') || 'image/jpeg';
            
            return {
                data: base64ImageData,
                mimeType: contentType
            };
        } catch (error) {
            console.error('Error fetching image:', error);
            return null;
        }
    }

    private async fetchVideoAsBase64(videoUrl: string): Promise<{ data: string; mimeType: string } | null> {
        try {
            const response = await fetch(videoUrl);
            if (!response.ok) {
                console.error(`Failed to fetch video: ${response.status} ${response.statusText}`);
                return null;
            }
            
            const videoArrayBuffer = await response.arrayBuffer();
            const base64VideoData = Buffer.from(videoArrayBuffer).toString('base64');
            
            const contentType = response.headers.get('content-type') || 'video/mp4';
            
            return {
                data: base64VideoData,
                mimeType: contentType
            };
        } catch (error) {
            console.error('Error fetching video:', error);
            return null;
        }
    }

    public async generateInstagramComment(
        postText: string,
        targetUsername: string,
        promptHint?: string,
        imageUrl?: string,
        videoUrl?: string
    ): Promise<string> {
        const promptText = this.buildPrompt(postText, targetUsername, promptHint);
        const contents: any[] = [];

        if (videoUrl) {
            console.log(`[AI_INFO] Sending video to Gemini for analysis: ${videoUrl.substring(0, 80)}...`);
            const videoData = await this.fetchVideoAsBase64(videoUrl);
            if (videoData) {
                contents.push({
                    inlineData: {
                        mimeType: videoData.mimeType,
                        data: videoData.data,
                    },
                });
            }
        } else if (imageUrl) {
            console.log(`[AI_INFO] Sending image to Gemini for analysis: ${imageUrl}`);
            const imageData = await this.fetchImageAsBase64(imageUrl);
            if (imageData) {
                contents.push({
                    inlineData: {
                        mimeType: imageData.mimeType,
                        data: imageData.data,
                    },
                });
            }
        }
        
        contents.push({ text: promptText });

        try {
            const genAI = new GoogleGenAI({apiKey: this.apiKey});

            const result = await genAI.models.generateContent({
                model: "gemini-2.5-flash-lite-preview-06-17",
                contents: contents,
                config: this.generationConfig,
            });

            const response = result.text!;
            const text = response.trim();
            if (!text) {
                throw new Error('AI returned an empty comment.');
            }
            return text.replace(/"/g, '');

        } catch (error) {
            console.error(`[AI_ERROR] API Key failed. Error:`, error);
            throw new Error(`Failed to generate comment for @${targetUsername} using the provided API key.`);
        }
    }
}